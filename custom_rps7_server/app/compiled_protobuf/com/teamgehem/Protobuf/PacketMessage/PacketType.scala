// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package com.teamgehem.Protobuf.PacketMessage


import com.trueaccord.scalapb.Descriptors

sealed trait PacketType extends com.trueaccord.scalapb.GeneratedEnum {
  def isNone: Boolean = false
  def isConnectionSuccess: Boolean = false
  def isInputChat: Boolean = false
  def isOutputChat: Boolean = false
  def isGoGameScene: Boolean = false
  def isJson: Boolean = false
}

object PacketType extends com.trueaccord.scalapb.GeneratedEnumCompanion[PacketType] {
  case object NONE extends PacketType {
    val id = 0
    val name = "NONE"
    override def isNone: Boolean = true
  }
  
  case object ConnectionSuccess extends PacketType {
    val id = 1
    val name = "ConnectionSuccess"
    override def isConnectionSuccess: Boolean = true
  }
  
  case object InputChat extends PacketType {
    val id = 2
    val name = "InputChat"
    override def isInputChat: Boolean = true
  }
  
  case object OutputChat extends PacketType {
    val id = 3
    val name = "OutputChat"
    override def isOutputChat: Boolean = true
  }
  
  case object GoGameScene extends PacketType {
    val id = 4
    val name = "GoGameScene"
    override def isGoGameScene: Boolean = true
  }
  
  case object Json extends PacketType {
    val id = 5
    val name = "Json"
    override def isJson: Boolean = true
  }
  
  lazy val values = Seq(NONE, ConnectionSuccess, InputChat, OutputChat, GoGameScene, Json)
  def fromValue(value: Int): PacketType = value match {
    case 0 => NONE
    case 1 => ConnectionSuccess
    case 2 => InputChat
    case 3 => OutputChat
    case 4 => GoGameScene
    case 5 => Json
  }
  lazy val descriptor = new Descriptors.EnumDescriptor(0, "PacketType", this)
}